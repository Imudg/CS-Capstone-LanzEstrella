using System.Collections;
using System.Collections.Generic;
using Unity.VisualScripting;
using UnityEngine;
using UnityEngine.EventSystems;
using UnityEngine.InputSystem;
using UnityEngine.UI;

public class playerContorllerScript : MonoBehaviour
{
    [Header("Unity Componenets")]
    private PlayerInputActions playerControl;
    [SerializeField] private Rigidbody2D rb;
    [SerializeField] private Animator animator;
    [SerializeField] private TrailRenderer tr;

    [Header("Input Actions")]
    private InputAction move;
    private InputAction dash;

    [Header("Movement Variables")]
    private Vector2 moveInput = Vector2.zero;
    [SerializeField] private float moveSpeed = 5.0f;

    [Header("Dash Variables")]
    private bool canDash = true;
    private bool isDashing = false;
    private Vector2 dashDirection = Vector2.zero;
    [SerializeField] private float dashSpeed = 25.0f;
    [SerializeField] private float dashDuration = 0.2f;
    [SerializeField] private float dashCooldown = 1f;

    // Game Start Initializations
    private void Awake()
    {
        playerControl = new PlayerInputActions();
        rb = GetComponent<Rigidbody2D>();
        animator = GetComponent<Animator>();
        tr = GetComponent<TrailRenderer>();
    }

    private void OnEnable()
    {
        move = playerControl.Player.Move;
        dash = playerControl.Player.Dash;

        move.Enable();
        dash.Enable();
    }

    private void OnDisable()
    {
        move.Disable();
        dash.Disable();
    }

    private void Update()
    {
        animator.SetFloat("Horizontal", moveInput.x);
        animator.SetFloat("Vertical", moveInput.y);
        animator.SetFloat("PlayerSpeed", moveInput.sqrMagnitude);
        
        if (isDashing)
        {
            return;
        }
    }

    private void FixedUpdate()
    {
        if (isDashing)
        {
            return;
        }
    
        rb.velocity = moveInput * moveSpeed;
    }

    public void Move(InputAction.CallbackContext context)
    {
        moveInput = context.ReadValue<Vector2>();
    }

    public void Dash(InputAction.CallbackContext context)
    {
        if(context.performed && canDash)
        {
            StartCoroutine(DashCoroutine());
        }
    }

    private void OnMove(InputValue inputValue)
    {
        moveInput = inputValue.Get<Vector2>();
    }

    private IEnumerator DashCoroutine()
    {
        Physics2D.IgnoreLayerCollision(7, 8, true);
        canDash = false;
        isDashing = true;

        dashDirection = moveInput.normalized;
        
        rb.velocity = dashDirection * dashSpeed;
        tr.emitting = true;
        yield return new WaitForSeconds(dashDuration);

        Physics2D.IgnoreLayerCollision(7,8,false);
        rb.velocity = dashDirection * moveSpeed;
        tr.emitting = false;
        isDashing = false;
        
        yield return new WaitForSeconds(dashCooldown);
        canDash = true;
    }
}
